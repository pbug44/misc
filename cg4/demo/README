Mon May 20 08:31:59 CEST 2024


     _                     ____  ____   __   
  __| | ___ _ __ ___   ___|___ \| ___| / /_  
 / _` |/ _ \ '_ ` _ \ / _ \ __) |___ \| '_ \ 
| (_| |  __/ | | | | | (_) / __/ ___) | (_) |
 \__,_|\___|_| |_| |_|\___/_____|____/ \___/ 
                                             

A demonstration for someone who wanted me to test a cipher as proof that
the given t0-t3 values and cipher and plain the key is recoverable.

The work is not done yet but this is just a commit so I don't lose this work.
I still feel it can be done but I'm not done yet.  Hoping to inspire others
to join the effort (please give me credit on your papers if you are inspired).

Basically what we can do with a partial AES-256 key (we have 128 bits because
we have the ciphertext), given the tX values we try to staircase our way up
with the modified for AES-256 inverse_function2.  it reaches until round 6.
So what to do?  Then I had the idea that we can mirror and flip the rkey's and
approach it from the other side.  Eventually the two will meet and carry over
the states.  I stopped partially with that as I had another idea of deciphering
the remaining 128 bits of key which is proven with inverse_function2 when
we recover it.  So far there is hardly any cycles needed yet.  I do this work
on a RPI 4b.

Also notice the extension from the mirror image into "pivots" (5 of them) that
will help us seperate the axis's and "cheat" around a little bit.

I've been fighting my own demons who want to sidetrack and confuse me along the
way.  What it reminds me of is this picture I once saw of a monk who copies the
testament and behind him is a demon who tries to confuse him and tortures him.
Oh well.  Life isn't easy, and programming means a lot of work.  Especially
this my original vision grew in code and I'm not done yet but I think it's
possible with a capital P.

Here is the demo program output of how the (extended) rk table looks like when
flipped through the spoon (I called that function so, because when you look in
a spoon you're upside down).

round 0  55032295,db788289,22700dfa,da6fd18c, pivot
round 1	 00000000,00000000,00000000,00000000,
round 2	 00000000,8e7ba01c,f9088f73,f81fdc76,
round 3	 00000000,00000000,00000000,00000000,
round 4	 00000000,00000000,77732f6f,01175305,
round 5	 00000000,00000000,00000000,00000000,
round 6	 00000000,00000000,00000000,76647c6a,
round 7  cdc76085,d2112edb,226e025c,378a39f9, pivot
round 8	 00000000,00000000,00000000,76647c6a,
round 9	 00000000,00000000,00000000,00000000,
round 10 00000000,00000000,77732f6f,01175305,
round 11 00000000,00000000,00000000,00000000,
round 12 00000000,8e7ba01c,f9088f73,f81fdc76,
round 13 00000000,00000000,00000000,00000000,
round 14 55032295,db788289,22700dfa,da6fd18c, pivot
round 15 00000000,00000000,00000000,00000000,

On round 7 you can see the pivot line very well, this is after running
rijndaelEncryptSetup() which I called mod() over it.  Anyhow study my code if
you dare.  If you are a newbie with code I wouldn't recommend it.  But go ahead
we were all newbies at one point.

-pjp

PS: read the comments in the code and the commit comments for more clues.
